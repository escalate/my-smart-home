- name: Install SDK for Python
  ansible.builtin.pip:
    name: "docker=={{ docker_python_version }}"
    state: present
    executable: pip3
  environment:
    PIP_BREAK_SYSTEM_PACKAGES: "1"

- name: Add GPG key fo apt repository
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present

- name: Configure apt repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_package_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} stable"
    state: present
    filename: docker-ce-stable

- name: Install packages
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  vars:
    packages:
      - "docker-ce=5:{{ docker_version }}~debian.{{ ansible_distribution_major_version }}~{{ ansible_distribution_release }}"
      - "docker-ce-cli=5:{{ docker_version }}~debian.{{ ansible_distribution_major_version }}~{{ ansible_distribution_release }}"
      - "containerd.io={{ docker_containerd_version }}"

- name: Add version pinning for packages
  ansible.builtin.template:
    src: docker.j2
    dest: /etc/apt/preferences.d/docker
    owner: root
    group: root
    mode: 0644

- name: Create service configuration
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify: Restart docker service

- name: Create Docker system prune script
  ansible.builtin.copy:
    src: docker-system-prune.sh
    dest: /usr/local/bin/docker-system-prune.sh
    owner: root
    group: root
    mode: 0755
  when: docker_system_prune_cron

- name: Add Docker system prune cron job
  ansible.builtin.cron:
    name: docker_system_prune
    state: present
    minute: "30"
    hour: "3"
    weekday: "6"
    user: root
    job: /usr/local/bin/docker-system-prune.sh
  when: docker_system_prune_cron

- name: Start service
  ansible.builtin.systemd:
    name: docker
    state: started
    daemon_reload: true
  register: docker_service_started

- name: Enable service
  ansible.builtin.systemd:
    name: docker
    enabled: true
    daemon_reload: true

- name: Force all notified handlers to run at this point
  ansible.builtin.meta: flush_handlers

- name: Create networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    ipam_config:
      - subnet: "{{ item.subnet }}"
  loop: "{{ docker_networks }}"

- name: Regather facts
  ansible.builtin.setup:
    gather_subset: all
